buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.google.gradle:osdetector-gradle-plugin:1.6.0')
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'com.google.osdetector'

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

group = 'ru.fullrest.mfr'
version = '0.1'
sourceCompatibility = 1.11
mainClassName = 'ru.fullrest.mfr.plugins_configuration_utility.PluginsConfigurationUtilityApplication'


repositories {
    mavenCentral()
}

dependencies {
//	spring-boot
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

//	database
    runtimeOnly('com.h2database:h2')

//	lombok
    compileOnly 'org.projectlombok:lombok:1.18.4'

//	JavaFX
    compile "org.openjfx:javafx-base:11:$platform"
    compile "org.openjfx:javafx-graphics:11:$platform"
    compile "org.openjfx:javafx-controls:11:$platform"
    compile "org.openjfx:javafx-fxml:11:$platform"
    compile "org.openjfx:javafx-swing:11:$platform"

//  apache-commons
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'

}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}

run {
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Morrowind Fullrest Repack Plugins Configuration Utility',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

